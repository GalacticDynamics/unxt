name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Many color libraries just need this to be set to any value, but at least
  # one distinguishes color depth, where "3" -> "256-bit color".
  FORCE_COLOR: 3

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install the project
        run: uv sync --group nox

      #     - uses: pre-commit/action@v3.0.1
      #       with:
      #         extra_args: --hook-stage manual --all-files
      - name: Run PyLint
        run: uv run nox -s pylint -- --output-format=github

  checks:
    name: Check Python ${{ matrix.python-version }} on ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    needs: [format]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        runs-on: [ubuntu-latest, macos-latest, windows-latest]

        # TODO: check when pypy3.11 is available
        # include:
        #   - python-version: pypy-3.11
        #     runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install the project
        run: uv sync --group test

      - name: Test package
        run: >-
          uv run pytest src docs tests -ra --cov --cov-report=xml
          --cov-report=term --durations=20

      - name: Upload coverage report
        uses: codecov/codecov-action@v5.0.7
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  check_oldest:
    name: Check Oldest Dependencies
    runs-on: ${{ matrix.runs-on }}
    needs: [format]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        runs-on: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install the project
        run: uv sync --extra all --group test-all --resolution lowest-direct

      - name: Test package
        run: >-
          uv run pytest src docs tests -ra --cov --cov-report=xml
          --cov-report=term --durations=20 --mpl

      - name: Upload coverage report
        uses: codecov/codecov-action@v5.0.7
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  check_interop:
    name: Check Interoperability
    runs-on: ${{ matrix.runs-on }}
    needs: [format]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        runs-on: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install the project
        run: uv sync --extra all --group test-all

      - name: Test package
        run: >-
          uv run pytest src docs tests -ra --cov --cov-report=xml
          --cov-report=term --durations=20 --mpl

      - name: Upload coverage report
        uses: codecov/codecov-action@v5.0.7
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-20.04
    needs: [format]
    if:
      github.event_name == 'workflow_dispatch' || (github.event_name ==
      'pull_request' && contains(github.event.pull_request.labels.*.name,
      'run-benchmarks'))
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install the project
        run: uv sync --group test

      - name: Run benchmarks
        uses: CodSpeedHQ/action@v3
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: uv run pytest tests/benchmark --codspeed
