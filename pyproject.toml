[project]
  name = "unxt"
  dynamic = ["version"]
  description = "Quantities in JAX"
  readme = "README.md"
  requires-python = ">=3.11,<3.14"
  authors = [
    { name = "GalacticDynamics", email = "nstarman@users.noreply.github.com" },
    { name = "Nathaniel Starkman", email = "nstarman@users.noreply.github.com" },
    { name = "Adrian Price-Whelan", email = "adrianmpw@gmail.com" },
  ]
  classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
  ]
  license.file = "LICENSE"
  dependencies = [
    "astropy>=7.0.0",
    "dataclassish>=0.3",
    "equinox>=0.11.8",
    "is-annotated>=1.0",
    "jax>0.4.32",
    "jaxlib>0.4.32",
    "jaxtyping>=0.2.34",
    "optional-dependencies>=0.3.2",
    "plum-dispatch>=2.5.4",
    "quax>=0.0.5",
    "quaxed>=0.6.7",
    "xmmutablemap>=0.1",
    "zeroth>=1.0.0",
]
  # NOTE: zeroth is only required for matplotlib

  [project.optional-dependencies]
    all             = ["unxt[backend-astropy,interop-gala,interop-mpl]"]
    backend-astropy = ["astropy>=6.0"]
    interop-gala    = ["gala>=1.8"]
    interop-mpl     = ["matplotlib>=3.4"]

  [project.urls]
    "Bug Tracker" = "https://github.com/GalacticDynamics/unxt/issues"
    Changelog     = "https://github.com/GalacticDynamics/unxt/releases"
    Discussions   = "https://github.com/GalacticDynamics/unxt/discussions"
    Homepage      = "https://github.com/GalacticDynamics/unxt"

[build-system]
  requires      = ["hatch-vcs", "hatchling"]
  build-backend = "hatchling.build"

[dependency-groups]
  dev = [
    "ipykernel>=6.29.5",
    { include-group = "docs" },
    { include-group = "nox" },
    { include-group = "test-all" },
  ]
  docs = [
    "myst-nb>=1.1.2",
    "myst_parser>=0.13",
    "pytz>=2024.2",               # for copyright date
    "sphinx-book-theme==1.1.3",
    "sphinx-prompt>=1.8.0",
    "sphinx-tippy",
    "sphinx>=7.0",
    "sphinx_autodoc_typehints",
    "sphinx_copybutton",
    "sphinx_design",
    "sphinx_togglebutton",
    "sphinxext-opengraph>=0.9.1",
    "sphinxext-rediraffe>=0.2.7",
  ]
  nox = ["nox>=2024.10.9"]
  test = [
    "hypothesis[numpy]>=6.112.2",
    "pytest-arraydiff>=0.6.1",
    "pytest-codspeed",
    "pytest-cov >=3",
    "pytest-github-actions-annotate-failures",
    "pytest>=8.3.3",
    "sybil>=8.0.0",
  ]
  test-mpl = ["pytest-mpl"]
  test-all = [{ include-group = "test" }, { include-group = "test-mpl" }]


[tool.hatch]
  build.hooks.vcs.version-file = "src/unxt/_version.py"
  version.source               = "vcs"


[tool.pytest.ini_options]
  addopts = [
    "--arraydiff",
    "--showlocals",
    "--strict-config",
    "--strict-markers",
    "-p no:doctest",    # using sybil
    "-ra",
  ]
  filterwarnings = [
    "error",
    "ignore:Attribute s is deprecated and will be removed in Python 3\\.14:DeprecationWarning", # from Sybil
    "ignore:ast\\.Str is deprecated and will be removed in Python 3\\.14:DeprecationWarning",   # from Sybil
    # jax
    "ignore:jax\\.core\\.pp_eqn_rules is deprecated:DeprecationWarning",
  ]
  log_cli_level = "INFO"
  minversion = "6.0"
  testpaths = ["docs", "src/", "tests/"]
  norecursedirs = ["docs/_build"]
  xfail_strict = true


[tool.coverage]
  report.exclude_also = ['\.\.\.', 'if typing.TYPE_CHECKING:']
  run.source          = ["unxt"]
  run.branch          = true

[tool.mypy]
  disallow_incomplete_defs = false
  disallow_untyped_defs    = false
  enable_error_code        = ["ignore-without-code", "redundant-expr", "truthy-bool"]
  files                    = ["src", "tests"]
  python_version           = "3.11"
  strict                   = true
  warn_return_any          = false
  warn_unreachable         = true
  warn_unused_configs      = true

  [[tool.mypy.overrides]]
    disable_error_code       = ["name-defined", "no-redef", "type-arg"]
    disallow_incomplete_defs = true
    disallow_untyped_defs    = true
    module                   = "unxt.*"

  [[tool.mypy.overrides]]
    ignore_missing_imports = true
    module = [
      "astropy.*",
      "equinox.*",
      "hypothesis.*",
      "jax.*",
      "jaxtyping.*",
      "numpy.*",
      "quax.*",
      "quaxed.*",
      "unxt.*",
    ]


[tool.ruff]
  [tool.ruff.lint]
    extend-select = ["ALL"]
    ignore = [
      "A002",    # Argument is shadowing a Python builtin
      "ANN101",  # Missing type annotation for `self` in method
      "ANN102",  # Missing type annotation for `cls` in method
      "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
      "ARG001",  # Unused function argument  # TODO: resolve
      "COM812",  # <- for ruff.format
      "D103",    # Missing docstring in public function  # TODO: resolve
      "D105",    # Missing docstring in magic method
      "D107",    # Missing docstring in __init__
      "D203",    # 1 blank line required before class docstring
      "D213",    # Multi-line docstring summary should start at the second line
      "ERA001",  # Commented out code
      "F722",    # Syntax error in forward annotation <- jaxtyping
      "F811",    # redefinition of unused '...'  <- plum-dispatch
      "F821",    # undefined name '...'  <- jaxtyping
      "FIX002",  # Line contains TODO
      "ISC001",  # Conflicts with formatter
      "N806",    # Variable in function should be lowercase
      "PD",      # Pandas
      "PLR09",   # Too many <...>
      "PLR2004", # Magic value used in comparison
      "PYI041",  # Use `complex` instead of `int | complex` <- plum is more strict
      "TD002",   # Missing author in TODO
      "TD003",   # Missing issue link on the line following this TODO
    ]

    [tool.ruff.lint.per-file-ignores]
      "__init__.py"  = ["F403"]
      "docs/conf.py" = ["A001", "INP001"]
      "noxfile.py"   = ["T20"]
      "tests/**"     = ["ANN", "E731", "S101", "SLF001", "T20"]

    [tool.ruff.lint.isort]
      combine-as-imports = true
      extra-standard-library = ["typing_extensions"]
      known-first-party = [
        "dataclassish",
        "is_annotated",
        "optional_dependencies",
        "quaxed",
        "xmmutablemap",
      ]
      known-local-folder = ["unxt"]

[tool.ruff.format]
  docstring-code-format = true


[tool.pylint]
  ignore-paths = [".*/_compat.py", ".*/_version.py"]
  messages_control.disable = [
    "cyclic-import",              # TODO: resolve
    "design",
    "fixme",
    "abstract-method",
    "function-redefined",         # plum-dispatch
    "invalid-name",               # handled by ruff
    "line-too-long",
    "missing-function-docstring", # TODO: resolve
    "missing-kwoa",               # plum-dispatch
    "missing-module-docstring",
    "not-callable",               # handled by mypy
    "property-with-parameters",   # handled by ruff
    "protected-access",           # handled by ruff
    "redefined-builtin",          # handled by ruff
    "too-many-function-args",     # plum-dispatch
    "unexpected-keyword-arg",     # plum-dispatch
    "unused-argument",            # handled by ruff
    "unused-import",              # handled by ruff
    "unused-wildcard-import",     # handled by ruff
    "wildcard-import",            # handled by ruff
    "wrong-import-order",         # handled by ruff
    "wrong-import-position",
  ]
  py-version = "3.11"
  reports.output-format = "colorized"
  similarities.ignore-imports = "yes"

  [tool.pylint."FORMAT"]
  max-module-lines = 2000
